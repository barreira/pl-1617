%option noyywrap
%x TD
%{
	#include <glib.h>
	#include <string.h>

	GTree* tree;
	char* key = NULL;
	char* value = NULL;

	void insert(void)
	{
		if (key != NULL && value != NULL) {
			g_tree_insert(tree, value, key);
			key = value = NULL;
		}
	}
%}
%%
<*>\<td\> { BEGIN TD; }

<TD>\<\/td\> {
	BEGIN INITIAL;  
}

<TD>\<i\> { }
<TD>\<b\> { }

<TD>[A-Za-z ]+[\<\/] {
	yytext[yyleng - 1] = '\0';

	if (yytext[yyleng - 2] == ' ') {
		yytext[yyleng - 2] = '\0';
	}

	value = strdup(yytext);
	insert();

	BEGIN INITIAL;
}

<TD>[A-Za-z \']+[\<\/] {
	yytext[yyleng - 1] = '\0';

	if (yytext[yyleng - 2] == ' ') {
		yytext[yyleng - 2] = '\0';
	}

	key = strdup(yytext);
	insert();

	BEGIN INITIAL;
}

.|\n {}

%%

gint comp(gconstpointer a, gconstpointer b)
{
	return strcmp((char*)a, (char*)b);
}


gboolean print(gpointer k, gpointer v, gpointer user_data)
{
	printf("%s - %s\n", (char*)k, (char*)v);	
}


int main (int argc, char* argv[]) {
    if(argc == 2) {
    	tree = g_tree_new(comp);
    	yyin = fopen(argv[1], "r");
    }
    
    yylex();
    printf("%d\n", g_tree_nnodes(tree));
  //  g_tree_foreach(tree, print, NULL);
    g_tree_destroy(tree);

    return 0;
}