%option noyywrap
%x TEMPLATE PARAMS VARS MAP

%{
	#include <glib.h>


	#define MAX_LINES 10000
	#define MAX_VARS  20


	gint comp(gconstpointer, gconstpointer);


	FILE* fp;	
	int array_size = 0;
	char* array[MAX_LINES];
	char* line = NULL;
	char* var = NULL;
	GTree* tree;

	int vars_size = 0;
	char* vars[MAX_VARS];

	int mapMode = 0;
	int mapLine = 0; 
	char* functionName = "";
	char* listLength = ""; 
	char* list = "";
%}

%%

<*>^[a-zA-Z]+\=\{\{ {
	int i = 0;

	fprintf(fp, "char* ");

	for (; i < yyleng && yytext[i] != '='; i++) {
		fprintf(fp, "%c", yytext[i]);
	}

	fprintf(fp, "(");

	BEGIN TEMPLATE;
}

<TEMPLATE>\[ {
	BEGIN PARAMS;
}

<TEMPLATE>\}\} {
	int i = 0;
	gchar* auxVar = "";

	
	for (; i < vars_size; i++) {
		if (i > 0) {
			fprintf(fp, ", ");
		}

		fprintf(fp, "char* ");
		fprintf(fp, "%s", vars[i]);	
	}

	if (mapMode == 1) {
		if (i > 0) {
			fprintf(fp, ", int %s,", listLength);
		}
		else {
			fprintf(fp, "int %s,", listLength);
		}

		fprintf(fp, " char* %s[]", list);		
	}

	fprintf(fp, ")\n{\n");
	fprintf(fp, "\tchar BUF[10000];\n\tint j = 0;\n");

	
	for (i = 0; i < array_size; i++) {
		if (mapMode == 1 && mapLine == i) {
			fprintf(fp, "\tj += sprintf(BUF + j, \"%s\");\n", array[i]);
			fprintf(fp,
                       "\tfor(int i = 0; i < %s; i++) {\n\t\tj += sprintf(BUF + j, \"%%s\", %s(%s[i]));\n\t}\n", listLength, functionName, list);  
			fprintf(fp, "\tj += sprintf(BUF + j, \"%s\\n\");\n", array[i + 1]);
		}
		else {
			auxVar = (gchar*)g_tree_lookup(tree, array[i]);
		
			if (auxVar != NULL && strcmp(auxVar, "") != 0) {
				fprintf(fp, 
                            "\tj += sprintf(BUF + j, \"%s\\n\", %s);\n", 
                             array[i], auxVar);
			}
			else if (auxVar) {
				fprintf(fp, 
                            "\tj += sprintf(BUF + j, \"%s\\n\");\n", 
                            array[i]);
			}
		}
	}

	fprintf(fp, "\treturn strdup(BUF);\n}\n");
	
	array_size = 0;
	vars_size = 0;
	mapMode = 0;
	mapLine = 0;
	
	BEGIN INITIAL;
}

<TEMPLATE>^[ \t]*[a-zA-Z0-9<> /]+ {
	if (line == NULL) {
		line = strdup(yytext);
	}
	else {
		strcat(line, yytext);
	}
}

<TEMPLATE>[ \t]*[a-zA-Z0-9<> /]+$ {
	int auxMap = 0;

	if (line != NULL && mapMode != 1) {
		strcat(line, "%s");
		strcat(line, yytext);
		array[array_size++] = strdup(line);
	}
	else if (line != NULL && mapMode == 1) {
		auxMap = 1;
		
		if (var != NULL) {
			var[0] = '\0';
		}

		array[array_size++] = strdup(line);
		array[array_size++] = strdup(yytext);
	}
	else if (line == NULL) {
		if (var != NULL) {
			var[0] = '\0';
		}

		array[array_size++] = strdup(yytext);
	}	


	if (auxMap != 1) {
		if (var == NULL) {
			g_tree_insert(tree, array[array_size - 1], "");
		}
		else {
			g_tree_insert(tree, array[array_size - 1], strdup(var));
		}
	}

	line = NULL;
}

<TEMPLATE>[ \t]*[a-zA-Z0-9<> /]+ {
	if (line == NULL) {
		line = strdup(yytext);
	}
	else {
		strcat(line, yytext);
	}
}

<PARAMS>"% " {
	BEGIN VARS;
} 

<VARS>"%]" {
	BEGIN TEMPLATE;
}

<VARS>"MAP" { 
	mapMode = 1;
	mapLine = array_size;
	BEGIN MAP;
}

<VARS>[a-zA-Z]+ {
	int i = 0;
	int existVar = 0;

	var = strdup(yytext);

	for (; i < vars_size; i++) {
		if (strcmp(var, vars[i]) == 0) {
			existVar = 1;
			break;
		}
	}

	if (existVar == 0) {
		vars[vars_size++] = strdup(var); 
	}
}

<MAP>"%]" {
	BEGIN TEMPLATE;
}

<MAP>[a-zA-Z ]+ {
	functionName = strdup(strtok(yytext, " "));   
	listLength = strdup(strtok(NULL, " "));
	list = strdup(strtok(NULL, " "));
}

.|\n { fprintf(fp, "%s", yytext);}

%%


gint comp(gconstpointer a, gconstpointer b)
{
	return (strcmp(a, b));
}


int main(int argc, char** argv)
{
	char* output;

	tree = g_tree_new(comp);

	if (argc == 2) {
		yyin = fopen(argv[1], "r");

		output = strtok(argv[1], ".");
		strcat(output, ".c");
		fp = fopen(output, "w");

		yylex();
	}


	fclose(fp);
	g_tree_destroy(tree);	

	return 0;
}
